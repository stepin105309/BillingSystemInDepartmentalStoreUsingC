<?xml version="1.0" encoding="UTF-8" ?>
<results version="2">
    <cppcheck version="2.2" />
    <errors>
        <error id="seekOnAppendedFile" severity="warning" msg="Repositioning operation performed on a file opened in append mode has no effect." verbose="Repositioning operation performed on a file opened in append mode has no effect." cwe="398" hash="5893886844411154530">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="32" column="9" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="8506719383029499969">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="31" column="9" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="8724254085080818786">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="59" column="9" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;file&apos; can be reduced." verbose="The scope of the variable &apos;file&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1061679533266196773">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="11" column="11" />
            <symbol>file</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8332302304535458113">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="46" column="9" />
            <symbol>flag</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: x" verbose="Unused variable: x" cwe="563" hash="11066299714758004476">
            <location file0="src\Add_Product.c" file="src\Add_Product.c" line="12" column="17" />
            <symbol>x</symbol>
        </error>
        <error id="fflushOnInputStream" severity="portability" msg="fflush() called on input stream &apos;file&apos; may result in undefined behaviour on non-linux systems." verbose="fflush() called on input stream &apos;file&apos; may result in undefined behaviour on non-linux systems." cwe="398" hash="4303385837314557391">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="106" column="5" />
        </error>
        <error id="fflushOnInputStream" severity="portability" msg="fflush() called on input stream &apos;file&apos; may result in undefined behaviour on non-linux systems." verbose="fflush() called on input stream &apos;file&apos; may result in undefined behaviour on non-linux systems." cwe="398" hash="6333684125041894705">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="181" column="5" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="16284154710389159635">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="41" column="9" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="9706663773656371440">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="180" column="5" />
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" hash="14927361015756141796">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="9" column="9" />
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used." cwe="563" hash="955719247708253880">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="24" column="22" />
            <symbol>size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total&apos; is assigned a value that is never used." verbose="Variable &apos;total&apos; is assigned a value that is never used." cwe="563" hash="2807982407591952566">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="25" column="16" />
            <symbol>total</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used." cwe="563" hash="12641929965969241344">
            <location file0="src\Calculate_Bill.c" file="src\Calculate_Bill.c" line="188" column="14" />
            <symbol>j</symbol>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="13901718791722571499">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="19" column="5" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119" hash="7465197244956777997">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="62" column="25" />
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="7692716829740737792">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="135" column="13" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17544282759331050252">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="9" column="17" />
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size&apos; can be reduced." verbose="The scope of the variable &apos;size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6583093379859320357">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="11" column="9" />
            <symbol>size</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: file" verbose="Uninitialized variable: file" cwe="457" hash="6872095345657866607">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="119" column="12" />
            <symbol>file</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: file" verbose="Uninitialized variable: file" cwe="457" hash="18084169184075578147">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="119" column="12" />
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="21" column="12" info="Assuming condition is false" />
            <symbol>file</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;flag&apos; is assigned a value that is never used." verbose="Variable &apos;flag&apos; is assigned a value that is never used." cwe="563" hash="18356520781286747434">
            <location file0="src\Edit_Product.c" file="src\Edit_Product.c" line="133" column="17" />
            <symbol>flag</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
    </errors>
</results>
